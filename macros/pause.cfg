######################################################################
# Macro pause
######################################################################

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0 # No quitar, imprescindible para el comando Pause
gcode:
  BEEP
  BEEP
  M400 # Pausa hasta que todas las acciones pendientes se completan
  _led_atencion

  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}

  ##### set park positon for x and y #####
  {% set x_park = printer.toolhead.axis_maximum.x|float - 2.0 %} # Goes to maximum x minus 2
  {% set y_park = printer.toolhead.axis_minimum.y|float + 2.0 %} # Goes to minimum y plus 2
  # End of X and Y position definitions

  ##### Variables definition for dinamic Z positionning #####
  {% set max_z = printer.toolhead.axis_maximum.z|default(235)|float %} # Altura maxima, no es necesario si está definida en otra parte, yo la pongo por seguridad
  {% set act_z = printer.toolhead.position.z|float %} # Variable para guardar la posición actual de Z
  {% set z_safe = 0.0|float %}  # Variable donde vamos a almacenar, al final del calculo, el desplazamiento, la subida que tiene que hacer Z
  {% set diferencia_park = (0.0)|float %} # Inicialización de la variable, donde se calcula el espacio disponible hasta el punto mas alto
  {% set ascenso_park = (0.0)|float %} # Variable para el calculo de la subida en función del espacio que queda, que será dividida por el factor que elijamos
  {% set subida_park = (0.0)|float %} # Variable para el calculo del valor absoluto de la posición de Z a la que queremos ir
 ##### end of definitions #####

   ##### Calculate dinamic Z position #####
  {% set diferencia_park = (max_z - printer.toolhead.position.z) %} # Aquí calculamos el espacio disponible, desde donde estamos, hasta el punto mas alto
  {% set ascenso_park = (diferencia_park / 5) %} # calculo de la subida en función de la altura, calculamos la cuarta parte del hueco que haya, (con el 5, se puede cambiar para otras alturas)
  {% set subida_park = (printer.toolhead.position.z + ascenso_park) %} # calculo de la posición a la que queremos llevar la boquilla, en función de los calculos anteriores
  {% set z_safe = (subida_park) %}  # Asignacion a la variable z_safe del valor absoluto de altura donde queremos ir en el eje Z
   ##### end of calculations #####

  ##### end of definitions #####

  PAUSE_BASE
  BEEP
  BEEP
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("La extrusora no esta suficientemente caliente")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900 # Aplicacion del dato obtenido en los calculos anteriores de posicionamiento dinamico de Z
    G90
    G1 X{x_park} Y{y_park} F1250 #6000
  {% else %}
    {action_respond_info("La impresora no ha hecho 'HOME'")}
   # LED_WARNING
  {% endif %} 
    BEEP
    M400 # Pausa hasta que todas las acciones pendientes se completan

